(()=>{"use strict";var e={144:function(e,o,t){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(o,"__esModule",{value:!0});const n=r(t(168));let a=[];console.log("Content script loaded and setting up message listener");const s=["crane","crate","slant","trace","carte","audio"];function l(e,o,t){console.log(`Processing game state for Game Board ${t+1}...`);let r=new Map,n=new Map,l=new Map;const i=o.querySelectorAll(".quordle-guess-row");if(console.log(`Found ${i.length} rows for Game Board ${t+1}`),0!==i.length){if(Array.from(i).forEach(((e,o)=>{const t=e.querySelectorAll(".quordle-box");console.log(`Row ${o+1} has ${t.length} cells`),Array.from(t).forEach(((e,o)=>{const t=e.getAttribute("aria-label");if(t){console.log(`Aria-Label: ${t}`);const e=t.match(/'(\w+)'|'Blank'/);if(e&&e[1]&&"Blank"!==e[1]){const a=e[1].toLowerCase();if(console.log(`Extracted Letter: ${a} at Cell Index: ${o}`),t.includes("is correct")){console.log(`Letter ${a} is correct at index ${o}`);let e=r.get(a)||[];e.push(o),r.set(a,e)}else if(t.includes("is incorrect")){console.log(`Letter ${a} is incorrect at index ${o}`);let e=l.get(a)||[];e.push(o),l.set(a,e)}else if(t.includes("is in a different spot")){console.log(`Letter ${a} is misplaced at index ${o}`);let e=n.get(a)||[];e.push(o),n.set(a,e)}}}}))})),console.log(`Green Characters Map for Board ${t+1}:`,[...r]),console.log(`Yellow Characters Map for Board ${t+1}:`,[...n]),console.log(`Grey Characters Map for Board ${t+1}:`,[...l]),e.quordleSolver(r,n,l,t),Array.from(i).every((e=>e.querySelector('.quordle-box[aria-label*="Blank"]'))))console.log(`No guesses made yet. Suggesting a strong starting word for Game Board ${t+1}.`),a[t]={quadrant:t,suggestions:[s[Math.floor(Math.random()*s.length)]]};else{let o=e.quordleSolver(r,n,l,t);console.log(`Suggestions for Game Board ${t+1}: ${o.join(", ")}`),a[t]={quadrant:t,suggestions:o}}var c;3===t&&(console.log(`Final generated suggestions: ${JSON.stringify(a)}`),c=a,console.log("Sending suggestions to popup:",JSON.stringify(c)),chrome.runtime.sendMessage({type:"suggestions",data:c}))}else console.log("No rows found - check the .quordle-guess-row selector")}chrome.runtime.onMessage.addListener(((e,o,t)=>(console.log("Content script received message:",e),"requestSuggestions"===e.type?(console.log("Popup requested suggestions."),t({status:"suggestions sent",data:a})):console.log("Received an unknown type of message."),!0))),function(){console.log("Starting extension...");const e=n.default.getInstance();console.log("Loading word bank..."),e.loadWordBank().then((()=>{console.log("Word bank loaded successfully."),function(e){console.log("Setting up observer on the Quordle game boards...");const o=document.querySelector(".middle-container");if(!o)return void console.error("Middle container not found!");const t=o.querySelector("#game-board-row-1"),r=o.querySelector("#game-board-row-2");if(!t||!r)return void console.error("Game board rows not found!");const n=[];t.querySelectorAll('div[aria-label^="Game Board"]').forEach((e=>n.push(e))),r.querySelectorAll('div[aria-label^="Game Board"]').forEach((e=>n.push(e))),n.forEach(((o,t)=>{console.log(`Checking initial state and setting up observer for Game Board ${t+1}...`),l(e,o,t),new MutationObserver((r=>{r.some((e=>"childList"===e.type&&e.addedNodes.length>0||"attributes"===e.type&&"aria-label"===e.attributeName))&&(console.log(`Relevant mutation observed for Game Board ${t+1}. Reprocessing state.`),l(e,o,t))})).observe(o,{childList:!0,attributes:!0,characterData:!0,subtree:!0,attributeFilter:["aria-label"]})}))}(e)})).catch((e=>{console.error("Failed to load word bank:",e)}))}()},168:function(e,o){var t=this&&this.__awaiter||function(e,o,t,r){return new(t||(t=Promise))((function(n,a){function s(e){try{i(r.next(e))}catch(e){a(e)}}function l(e){try{i(r.throw(e))}catch(e){a(e)}}function i(e){var o;e.done?n(e.value):(o=e.value,o instanceof t?o:new t((function(e){e(o)}))).then(s,l)}i((r=r.apply(e,o||[])).next())}))};Object.defineProperty(o,"__esModule",{value:!0});class r{constructor(){this.wordBank=[],this.quadrantWordLists=Array(4).fill(null).map((()=>[]))}static getInstance(){return r.instance||(r.instance=new r),r.instance}loadWordBank(){return t(this,void 0,void 0,(function*(){try{const e=chrome.runtime.getURL("word-bank.txt");console.log(`Fetching word bank from URL: ${e}`);const o=yield fetch(e),t=yield o.text();this.wordBank=t.split("\n").map((e=>e.trim())).filter((e=>e.length>0)),console.log(`Loaded ${this.wordBank.length} words into the word bank.`),this.initializeQuadrantWordLists(),console.log("Word bank loaded successfully.")}catch(e){console.error("Error loading word bank:",e)}}))}getWordBankSizeForQuadrant(e){var o;return(null===(o=this.quadrantWordLists[e])||void 0===o?void 0:o.length)||0}initializeQuadrantWordLists(){for(let e=0;e<4;e++)this.quadrantWordLists[e]=[...this.wordBank]}quordleSolver(e,o,t,r){return this.filterWordsForQuadrant(e,o,t,r),this.quadrantWordLists[r].slice(0,3)}filterWordsForQuadrant(e,o,t,r){let n=this.filterGreenCharacters(e),a=this.filterYellowCharacters(o,n),s=this.filterGreyCharacters(t,e,o,a);this.quadrantWordLists[r]=s}filterGreenCharacters(e){return this.wordBank.filter((o=>{for(let[t,r]of e)if(!r.every((e=>o.charAt(e)===t)))return!1;return!0}))}filterYellowCharacters(e,o){return o.filter((o=>{for(let[t,r]of e)if(!o.includes(t)||r.some((e=>o.charAt(e)===t)))return!1;return!0}))}filterGreyCharacters(e,o,t,r){let n=new Map(e);return o.forEach(((e,o)=>n.delete(o))),t.forEach(((e,o)=>n.delete(o))),r.filter((e=>{let o=!0;for(let[t,r]of n)if(r.some((o=>e.charAt(o)===t))){o=!1;break}return o}))}}o.default=r}},o={};!function t(r){var n=o[r];if(void 0!==n)return n.exports;var a=o[r]={exports:{}};return e[r].call(a.exports,a,a.exports,t),a.exports}(144)})();